generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(cuid())
  email                  String            @unique
  name                   String
  password               String
  role                   String            @default("USER")
  school                 String?
  grade                  String?
  points                 Int               @default(0)
  level                  Int               @default(1)
  experience             Int               @default(0)
  city                   String?
  state                  String?
  avatar                 String?
  bio                    String?
  socialLinks            String?
  lastLogin              DateTime?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  emailConfirmed         Boolean           @default(false)
  emailConfirmationToken String?
  achievements           Achievement[]
  activities             Activity[]
  blogPosts              BlogPost[]
  commentReactions       CommentReaction[]
  comments               Comment[]
  disposals              Disposal[]
  donations              Donation[]
  notifications          Notification[]
  rewards                Reward[]
  stories                Story[]
  supportTickets         SupportTicket[]
  challenges             UserChallenge[]

  @@map("users")
}

model Disposal {
  id           String   @id @default(cuid())
  userId       String
  materialType String
  weight       Float
  imageUrl     String?
  location     String?
  city         String?
  state        String?
  points       Int
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("disposals")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  points      Int
  icon        String
  badgeType   String   @default("BRONZE")
  unlockedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model Challenge {
  id           String          @id @default(cuid())
  title        String
  description  String
  type         String
  target       Int
  points       Int
  startDate    DateTime
  endDate      DateTime
  active       Boolean         @default(true)
  createdAt    DateTime        @default(now())
  participants UserChallenge[]

  @@map("challenges")
}

model UserChallenge {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  progress    Int       @default(0)
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@map("user_challenges")
}

model Reward {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  pointsCost  Int
  type        String
  partner     String?
  code        String?
  claimedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rewards")
}

model RewardCatalog {
  id          String   @id @default(cuid())
  title       String
  description String
  pointsCost  Int
  type        String
  partner     String
  partnerLogo String?
  available   Boolean  @default(true)
  stock       Int?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reward_catalog")
}

model Story {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  imageUrl  String?
  impact    String
  approved  Boolean  @default(false)
  likes     Int      @default(0)
  views     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stories")
}

model BlogPost {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String
  excerpt   String?
  imageUrl  String?
  tags      String?
  published Boolean  @default(false)
  views     Int      @default(0)
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("blog_posts")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  data      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  type        String
  description String
  data        String?
  public      Boolean  @default(true)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model School {
  id          String   @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  contact     String
  email       String
  totalPoints Int      @default(0)
  totalWeight Float    @default(0)
  level       Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("schools")
}

model ImpactData {
  id                String   @id @default(cuid())
  totalPlastic      Float    @default(0)
  totalGlass        Float    @default(0)
  totalPaper        Float    @default(0)
  totalMetal        Float    @default(0)
  totalOrganic      Float    @default(0)
  totalElectronic   Float    @default(0)
  co2Reduction      Float    @default(0)
  decompositionTime Int      @default(0)
  activeUsers       Int      @default(0)
  totalPoints       Int      @default(0)
  treesEquivalent   Int      @default(0)
  waterSaved        Float    @default(0)
  energySaved       Float    @default(0)
  updatedAt         DateTime @updatedAt

  @@map("impact_data")
}

model CollectionPoint {
  id        String   @id @default(cuid())
  name      String
  address   String
  city      String
  state     String
  latitude  Float
  longitude Float
  materials String
  phone     String?
  email     String?
  website   String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("collection_points")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  school    String?
  subject   String
  message   String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model SupportTicket {
  id         String    @id @default(cuid())
  userId     String
  subject    String
  message    String
  priority   String    @default("MEDIUM")
  status     String    @default("OPEN")
  category   String
  assignedTo String?
  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}

model Donation {
  id        String   @id @default(cuid())
  userId    String
  points    Int
  cause     String
  message   String?
  anonymous Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("donations")
}

model Partner {
  id          String   @id @default(cuid())
  name        String
  description String
  logo        String?
  website     String?
  email       String
  phone       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("partners")
}

model Comment {
  id         String            @id @default(cuid())
  userId     String?
  name       String
  email      String
  content    String
  approved   Boolean           @default(false)
  likes      Int               @default(0)
  dislikes   Int               @default(0)
  parentId   String?
  storyId    String?
  blogPostId String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  reactions  CommentReaction[]
  parent     Comment?          @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[]         @relation("CommentReplies")
  user       User?             @relation(fields: [userId], references: [id])

  @@map("comments")
}

model CommentReaction {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  type      String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_reactions")
}

model AchievementCatalog {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  points      Int?      @default(0)
  icon        String?
  badgetype   String?   @default("BRONZE")
  createdat   DateTime? @default(now()) @db.Timestamptz(6)
  updatedat   DateTime? @default(now()) @db.Timestamptz(6)

  @@map("achievement_catalog")
}
